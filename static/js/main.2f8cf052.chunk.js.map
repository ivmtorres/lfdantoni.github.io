{"version":3,"sources":["components/Sidebar/styles.module.scss","components/Sidebar/SLink/styles.module.scss","components/Sidebar/profile-picture.jpg","components/App/styles.module.scss","components/Sidebar/SLink/index.tsx","components/Sidebar/index.tsx","components/App/App.tsx","config/i18n.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","SLink","props","className","styles","container","href","link","isActive","active","title","Sidebar","t","useTranslation","src","profileImg","alt","picture","Page","Loader","hot","fallback","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,QAAU,0B,mBCAlED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,OAAS,yB,mBCDjED,EAAOC,QAAU,IAA0B,6C,mBCC3CD,EAAOC,QAAU,CAAC,UAAY,4B,sLCgBfC,EARD,SAACC,GACX,OACI,yBAAKC,UAAWC,IAAOC,WACpB,uBAAGC,KAAMJ,EAAMK,KAAMJ,UAAWD,EAAMM,SAAWJ,IAAOK,OAAS,IAAI,8BAAOP,EAAMQ,U,iBCM9EC,EAZC,WAAO,IACXC,EAAMC,cAAND,EAER,OACI,yBAAKT,UAAWC,IAAOC,WACnB,yBAAKS,IAAKC,IAAYC,IAAKJ,EAAE,0BAA2BT,UAAWC,IAAOa,UAC1E,kBAAC,EAAD,CAAOV,KAAK,GAAGG,MAAOE,EAAE,sBAAuBJ,UAAU,IACzD,kBAAC,EAAD,CAAOD,KAAK,GAAGG,MAAOE,EAAE,uBAAwBJ,UAAU,M,iBCPhEU,EAAO,WAAO,IACRN,EAAMC,cAAND,EAER,OACI,yBAAKT,UAAWC,IAAOC,WAClBO,EAAE,SACH,kBAAC,EAAD,QAKNO,EAAS,kBACX,yBAAKhB,UAAU,OACb,6CAaSiB,qBARf,WACI,OACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAChB,kBAAC,EAAD,U,gCCtBZC,IAGGC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,KAIJT,EAAf,EAAeA,ICbTU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCjGjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACnBC,GACD7B,OAAOC,SAAS7B,MAEJ0D,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC9C/BE,K","file":"static/js/main.2f8cf052.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3IUW8\",\"picture\":\"styles_picture__2K61h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__A3sje\",\"active\":\"styles_active__3ChlI\"};","module.exports = __webpack_public_path__ + \"static/media/profile-picture.09d689c1.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1Cfj-\"};","import React from 'react'\nimport styles from './styles.module.scss'\n\nexport interface LinkProp {\n    link: string,\n    title: string,\n    isActive: boolean // TODO remove it after add router\n}\n\nconst SLink = (props: LinkProp) => {\n    return (\n        <div className={styles.container}>\n           <a href={props.link} className={props.isActive ? styles.active : ''}><span>{props.title}</span></a>\n        </div>\n    )\n}\n\nexport default SLink\n","import styles from './styles.module.scss';\nimport {useTranslation} from 'react-i18next';\nimport React from 'react'\nimport SLink from './SLink';\nimport profileImg from './profile-picture.jpg'\n\nconst Sidebar = () => {\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.container}>\n            <img src={profileImg} alt={t('sidebar.profilePicture')} className={styles.picture}/>\n            <SLink link=\"\" title={t('sidebar.menu.start')} isActive={true}/>\n            <SLink link=\"\" title={t('sidebar.menu.resume')} isActive={false}/>\n        </div>\n    )\n}\n\nexport default Sidebar;\n","import React, {Suspense} from 'react'\nimport {useTranslation} from 'react-i18next';\nimport {hot} from 'react-hot-loader/root'\nimport Sidebar from '../Sidebar'\nimport styles from './styles.module.scss'\n\nconst Page = () => {\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.container}>\n            {t('title')}\n            <Sidebar />\n        </div>\n    )\n}\n\nconst Loader = () => (\n    <div className=\"App\">\n      <div>loading...</div>\n    </div>\n  );\n  \n  // here app catches the suspense from page in case translations are not yet loaded\nfunction App() {\n    return (\n        <Suspense fallback={<Loader />}>\n            <Page />\n        </Suspense>\n    );\n}\n\nexport default hot(App);\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.scss';\nimport './config/i18n';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}